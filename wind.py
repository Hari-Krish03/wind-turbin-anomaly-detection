# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13P454_oVVIEhxXldG8L94tKZLSuaMXxh
"""

from google.colab import files
uploaded=files.upload()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
df = pd.read_csv('wind_turbine_condition_dataset.csv')

df.fillna(0, inplace=True)

df.isnull().any().sum()
df.head(2)



import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt




scaler = StandardScaler()
normalized_data = scaler.fit_transform(df)


n_components = 1
pca = PCA(n_components=n_components)
principal_components = pca.fit_transform(normalized_data)


reconstructed_data = pca.inverse_transform(principal_components)
reconstruction_error = np.mean(np.square(normalized_data - reconstructed_data), axis=1)


threshold = 1.5

# Find anomalies
anomalies = np.where(reconstruction_error > threshold)[0]


plt.figure()
plt.plot(reconstruction_error, label='Reconstruction Error')
plt.axhline(y=threshold, color='r', linestyle='--', label='Threshold')
plt.scatter(anomalies, reconstruction_error[anomalies], color='red', label='Anomalies')
plt.xlabel('Data Point')
plt.ylabel('Reconstruction Error')
plt.legend()
plt.title('Anomaly Detection using PCA')
plt.show()